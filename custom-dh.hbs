{{!< default}} <meta name="keywords"
    content="DH parameters calculator,DH calculator,Forward Kinematics calculator,Denavit-Hartenberg Forward kinematics,Denavit-Hartenberg,Denavit Hartenberg,Denavit Hartenberg parameter,DH,Denavit,Hartenberg,prajankya sonar,robotics,6DOF,DOF,kinematics,Forward,DH parameters,robotics">
    {{!-- The tag above means: insert everything in this file
    into the {body} of the default.hbs template --}}

    {{!-- The big featured header, it uses blog cover image as a BG if available --}}
    <header class="site-header">
        <div class="outer site-nav-main">
            <div class="inner">
                {{> "site-nav"}}
            </div>
        </div>
    </header>

    {{!-- Everything inside the #post tags pulls data from the post --}}
    {{#post}}

    <main id="site-main" class="site-main outer" ng-app="MyApp" ng-controller="MyController">
        <div class="inner">

            <article class="post-full {{post_class}} {{#unless feature_image}}no-image{{/unless}}">

                <header class="post-full-header">
                    <h1 class="post-full-title">{{title}}</h1>
                </header>

                {{#if feature_image}}
                <figure class="post-full-image">
                    {{!-- This is a responsive image, it loads different sizes depending on device
                    https://medium.freecodecamp.org/a-guide-to-responsive-images-with-ready-to-use-templates-c400bd65c433
                    --}}
                    <img srcset="{{img_url feature_image size=" s"}} 300w, {{img_url feature_image size="m" }} 600w,
                        {{img_url feature_image size="l" }} 1000w, {{img_url feature_image size="xl" }} 2000w" sizes="(max-width: 800px) 400px,
                            (max-width: 1170px) 1170px,
                            2000px" src="{{img_url feature_image size=" xl"}}" alt="{{title}}" />
                </figure>
                {{/if}}

                <section class="post-full-content">
                    <div class="post-content" ng-app="MyApp" ng-controller="MyController">
                        {{content}}
                    </div>
                </section>

            </article>

        </div>

    </main>


    {{/post}}

    {{!-- The #contentFor helper here will send everything inside it up to the matching #block helper found in
    default.hbs --}}
    {{#contentFor "scripts"}}

    <style>
        /* MODAL STYLES -------------------------------*/
        modal {
            /* modals are hidden by default */
            display: none;
        }

        modal .modal {
            /* modal container fixed across whole screen */
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            /* z-index must be higher than .modal-background */
            z-index: 1000;
            /* enables scrolling for tall modals */
            overflow: auto;
        }

        modal .modal h2 {
            margin: 0.2em 0 0.8em 0;
            padding-bottom: 0.3em;
            font-size: 3rem;
            border-bottom: 1px solid rgba(150, 150, 150, 0.2);
        }

        modal .modal .modal-body {
            padding: 20px;
            background: #fff;
            /* margin exposes part of the modal background */
            margin: 40px;
            margin-top: 20vh;

            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid rgba(0, 0, 0, .2);
            border-radius: .3rem;
        }

        modal .modal-background {
            /* modal background fixed across whole screen */
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            /* semi-transparent black  */
            background-color: #000;
            opacity: 0.75;
            /* z-index must be below .modal and above everything else  */
            z-index: 900;
        }

        body.modal-open {
            /* body overflow is hidden to hide main scrollbar when modal window is open */
            overflow: hidden;
        }


        /**/
        .form-control {
            display: block;
            min-width: 50px;
            width: 100%;
            padding: 2px;
            font-size: 1.3rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        }

        .btn:focus,
        .btn:hover {
            text-decoration: none;
        }

        .btn.disabled,
        .btn:disabled {
            opacity: .65;
            cursor: not-allowed;
        }

        .btn.focus,
        .btn:focus {
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);
        }

        .btn-secondary {
            color: #fff;
            background-color: #6c757d;
            border-color: #6c757d;
        }

        .btn-secondary:hover {
            color: #fff;
            background-color: #5a6268;
            border-color: #545b62;
        }

        .btn-secondary.focus,
        .btn-secondary:focus {
            box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, .5);
        }

        .btn-danger {
            color: #fff;
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-danger:hover {
            color: #fff;
            background-color: #c82333;
            border-color: #bd2130;
        }

        .btn-danger.focus,
        .btn-danger:focus {
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, .5);
        }

        .btn-info {
            color: #fff;
            background-color: #17a2b8;
            border-color: #17a2b8
        }

        .btn-info:hover {
            color: #fff;
            background-color: #138496;
            border-color: #117a8b;
        }

        .btn-info.focus,
        .btn-info:focus {
            box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, .5);
        }

        .btn-success {
            color: #fff;
            background-color: #28a745;
            border-color: #28a745;
        }

        .btn-success:hover {
            color: #fff;
            background-color: #218838;
            border-color: #1e7e34;
        }

        .btn-success.focus,
        .btn-success:focus {
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, .5);
        }

        .btn {
            display: inline-block;
            font-weight: 400;
            text-align: center;
            white-space: nowrap;
            vertical-align: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            border: 1px solid transparent;
            padding: 6px 10px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            border-radius: .25rem;
            transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
        }

        button,
        input {
            overflow: visible;
        }

        .inline,
        .inline * {
            display: inline;
        }

        .formula {
            font-family: monospace;
            line-height: normal;
            text-align: center;
            padding: 12px 16px;
            background: rgba(150, 150, 150, 0.2);
        }

        .mono {
            font-family: monospace;
            line-height: normal;
            font-weight: 700;
            padding: 4px 8px;
            font-size: 16px;
            background: rgba(125, 125, 125, 0.5);
        }

        .step3_row {
            width: 100%;
            border-top: 1px solid rgba(125, 125, 125, 0.1);
            margin-bottom: 20px;
        }

        .step3_row div:first-child,
        .step3_row div:first-child input {
            display: inline;
            width: auto;
            margin: 12px;
        }

        .step3_row div:last-child {
            margin-left: 20px;
            margin-bottom: 20px;
        }

        .matrix table {
            display: table;
            font-family: monospace;
            white-space: pre;
            line-height: normal;
            margin: 0;
            width: 100%;

            border-left: 2px solid #000;
            border-right: 2px solid #000;
        }

        .matrix>table>tr>td {
            position: relative;
        }

        .matrix>table>tr:first-child>td:first-child:before {
            content: " ";
            position: absolute;
            display: block;
            left: -1px;
            top: -1px;
            width: 16px;
            border-top: 2px solid black;
        }

        .matrix>table>tr:first-child>td:last-child:before {
            content: " ";
            position: absolute;
            display: block;
            right: -1px;
            top: -1px;
            width: 16px;
            border-top: 2px solid black;
        }

        .matrix>table>tr:last-child>td:first-child:after {
            content: " ";
            position: absolute;
            display: block;
            left: -1px;
            bottom: -1px;
            width: 16px;
            border-bottom: 2px solid black;
        }

        .matrix>table>tr:last-child>td:last-child:after {
            content: " ";
            position: absolute;
            right: -1px;
            bottom: -1px;
            width: 16px;
            border-bottom: 2px solid black;
        }


        /* 
        Max width before this PARTICULAR table gets nasty
        This query will take effect for any screen smaller than 760px
        and also iPads specifically.
        */
        @media only screen and (max-width: 760px) {

            /* Force table to not be like tables anymore */
            #links_table>thead,
            #links_table>thead th,
            #links_table>tbody>tr>td {
                display: block;
            }

            /* Hide table headers (but not display: none;, for accessibility) */
            #links_table>thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }

            #links_table,
            #links_table>tbody,
            #links_table>tbody>tr,
            #links_table>tbody>tr>td {
                border: none;
                border-image-width: 0;
                border-image: none !important;
                background: none;
            }

            #links_table>tbody {
                display: table;
                width: 90vw !important;
            }

            #links_table>tbody>tr {
                border: 1px solid #ccc;
                padding-bottom: 20px;
            }

            #links_table>tbody>tr>td {
                /* Behave  like a "row" */
                border-bottom: 1px solid #f6f6f6;
                position: relative;
                padding-left: 50%;
            }

            #links_table>tbody>tr>td:before {
                /* Now like a table header */
                position: absolute;
                /* Top/left values mimic padding */
                top: 6px;
                left: 6px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
            }

            /*
            Label the data
            */
            #links_table>tbody>tr>td:nth-of-type(1):before {
                content: "LINK";
            }

            #links_table>tbody>tr>td:nth-of-type(2):before {
                content: "A";
            }

            #links_table>tbody>tr>td:nth-of-type(3):before {
                content: "APLHA";
            }

            #links_table>tbody>tr>td:nth-of-type(4):before {
                content: "D";
            }

            #links_table>tbody>tr>td:nth-of-type(5):before {
                content: "THETA";
            }

            #links_table>tbody>tr>td:nth-of-type(6):before {
                content: "MATRIX";
            }

            #links_table>tbody>tr>td:nth-of-type(7):before {
                content: " ";
            }
        }
    </style>

    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"
        integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg=="
        crossorigin="anonymous"></script>

    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>

    <script>
        var app = angular.module('MyApp', [], function ($interpolateProvider) {
            $interpolateProvider.startSymbol('[[');
            $interpolateProvider.endSymbol(']]');
        });

        app.filter('reverse', function () {
            return function (items) {
                return items.slice().reverse();
            };
        });

        app.controller('MyController', function ($scope, $window, $timeout, $sce, ModalService) {
            $scope.links = [];

            var demo_links = [{
                a: 0,
                alpha: -90,
                d: 290,
                theta: 0,
                name: "Link 1"
            }, {
                a: 270,
                alpha: 0,
                d: 0,
                theta: -90,
                name: "Link 2"
            }, {
                a: -70,
                alpha: 90,
                d: 0,
                theta: 180,
                name: "Link 3"
            }, {
                a: 0,
                alpha: -90,
                d: 302,
                theta: 0,
                name: "Link 4"
            }, {
                a: 0,
                alpha: 90,
                d: 0,
                theta: 0,
                name: "Link 5"
            }, {
                a: 0,
                alpha: 0,
                d: 72,
                theta: 0,
                name: "Link 6"
            }];

            $scope.openModal = function (id) {
                ModalService.Open(id);
            }

            $scope.closeModal = function (id) {
                ModalService.Close(id);
            }

            $scope.loadExample = function () {
                if ($scope.links.length > 0) {
                    $scope.openModal('demoConfirmModal');
                } else {
                    $scope.links = angular.copy(demo_links);
                }

            }
            $scope.demoConfirmModalSubmit = function () {
                $timeout(function () {
                    $scope.links = angular.copy(demo_links);
                    $scope.closeModal('demoConfirmModal');
                });
            }
            $scope.Add = function () {
                //Add the new item to the Array.
                var link = {};
                link.d = $scope.d;
                link.alpha = $scope.alpha;
                link.a = $scope.a;
                link.theta = $scope.theta;

                var getName = function (ind) {
                    var newName = "Link " + ind
                    for (let i = 0; i < $scope.links.length; i++) {
                        if ($scope.links[i].name && $scope.links[i].name.trim() == newName) {
                            return getName(++ind)
                            break;
                        }
                    }
                    return newName
                }
                link.name = getName($scope.links.length)

                $scope.links.push(link);

                $scope.d = undefined;
                $scope.alpha = undefined;
                $scope.theta = undefined;
                $scope.a = undefined;
            };

            $scope.Remove = function (index) {
                $scope.link_to_remove_index = index;
                $scope.link_to_remove_name = $scope.links[index].name;
                $scope.openModal('removeConfirmModal');
            }
            $scope.RemoveConfirmed = function () {
                $scope.links.splice($scope.link_to_remove_index, 1);
                $scope.link_to_remove_index = undefined;
                $scope.link_to_remove_name = undefined;
                $scope.closeModal('removeConfirmModal');
            }
            $scope.printMatrix = function (l) {
                return $scope.getMatrixHTML($scope.getMatrix(l))
            }
            $scope.getMatrix = function (l) {
                return [
                    [
                        Math.cos(toRad(l.theta)), -Math.sin(toRad(l.theta)) * Math.cos(toRad(l.alpha)), Math.sin(toRad(l.theta)) * Math.sin(toRad(l.alpha)), l.a * Math.cos(toRad(l.theta))
                    ], [
                        Math.sin(toRad(l.theta)), Math.cos(toRad(l.theta)) * Math.cos(toRad(l.alpha)), -Math.cos(toRad(l.theta)) * Math.sin(toRad(l.alpha)), l.a * Math.sin(toRad(l.theta))
                    ], [
                        0, Math.sin(toRad(l.alpha)), Math.cos(toRad(l.alpha)), l.d

                    ], [
                        0, 0, 0, 1
                    ]
                ]
            }


            $scope.getMatrixHTML = function (m) {
                return $sce.trustAsHtml($('<table class="matrix"/>')
                    .append(
                        $('<tr/>')
                            .append(
                                $('<td/>')
                                    .html(precise(m[0][0]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[0][1]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[0][2]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[0][3]))
                            )
                    )
                    .append(
                        $('<tr/>')
                            .append(
                                $('<td/>')
                                    .html(precise(m[1][0]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[1][1]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[1][2]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[1][3]))
                            )
                    )
                    .append(
                        $('<tr/>')
                            .append(
                                $('<td/>')
                                    .html(precise(m[2][0]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[2][1]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[2][2]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[2][3]))
                            )
                    )
                    .append(
                        $('<tr/>')
                            .append(
                                $('<td/>')
                                    .html(precise(m[3][0]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[3][1]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[3][2]))
                            )
                            .append(
                                $('<td/>')
                                    .html(precise(m[3][3]))
                            )
                    ).html())
            }

            $scope.getFinalMatrix = function () {
                var t = [[1, 0, 0, 0],
                [0, 1, 0, 0],
                [0, 0, 1, 0],
                [0, 0, 0, 1]]

                for (let i = 0; i < $scope.links.length; i++) {
                    t = multiply(t, $scope.getMatrix($scope.links[i]))
                }
                return t
            }
            $scope.printFinalMatrix = function () {
                return $scope.getMatrixHTML($scope.getFinalMatrix())
            }
            $scope.openNewWindow = function (url) {
                window.open(url);
            }
        });

        app.factory("ModalService", function () {

            var modals = []; // array of modals on the page
            var service = {};

            service.Add = Add;
            service.Remove = Remove;
            service.Open = Open;
            service.Close = Close;

            return service;

            function Add(modal) {
                // add modal to array of active modals
                modals.push(modal);
            }

            function Remove(id) {
                // remove modal from array of active modals

                for (var i = 0; i < modals.length; i++) {
                    if (modals[i].id == id) {
                        modals.splice(i, 1);
                    }
                }
            }

            function Open(id) {
                // open modal specified by id
                for (var i = 0; i < modals.length; i++) {
                    if (modals[i].id == id) {
                        modals[i].open();
                    }
                }
            }

            function Close(id) {
                // close modal specified by id
                for (var i = 0; i < modals.length; i++) {
                    if (modals[i].id == id) {
                        modals[i].close();
                    }
                }
            }
        })

        app.directive("modal", function (ModalService) {
            return {
                link: function (scope, element, attrs) {
                    // ensure id attribute exists
                    if (!attrs.id) {
                        console.error('modal must have an id');
                        return;
                    }

                    // move element to bottom of page (just before </body>) so it can be displayed above everything else
                    element.appendTo('body');

                    // close modal on background click
                    element.on('click', function (e) {
                        var target = $(e.target);
                        if (!target.closest('.modal-body').length) {
                            scope.$evalAsync(Close);
                        }
                    });

                    // add self (this modal instance) to the modal service so it's accessible from controllers
                    var modal = {
                        id: attrs.id,
                        open: Open,
                        close: Close
                    };
                    ModalService.Add(modal);

                    // remove self from modal service when directive is destroyed
                    scope.$on('$destroy', function () {
                        ModalService.Remove(attrs.id);
                        element.remove();
                    });

                    // open modal
                    function Open() {
                        element.show();
                        $('body').addClass('modal-open');
                    }

                    // close modal
                    function Close() {
                        element.hide();
                        $('body').removeClass('modal-open');
                    }
                }
            };
        })

        app.directive("floatingNumberOnly", function () {
            return {
                require: 'ngModel',
                link: function (scope, ele, attr, ctrl) {
                    ctrl.$parsers.push(function (inputValue) {
                        var pattern = new RegExp("^[-+]?[0-9]*\.?[0-9]+$", "g");
                        if (inputValue == '') {
                            return '';
                        }
                        var newInput = inputValue.replace(/[^-0-9.]/g, '');
                        var check = pattern.test(inputValue)//On every test, the value is different, so just taking it once

                        if (!check || newInput != inputValue) {
                            //remove multiple dots
                            var parts = newInput.split('.');
                            newInput = parts.shift() + (parts.length ? '.' : '') + parts.join('');

                            //remove multiple, and in middle - signs
                            parts = newInput.split("-")
                            newInput = ((parts.length > 1 && parts[0].length == 0) ? "-" : "") + newInput.replace(/[\-]/g, '')
                        }

                        ctrl.$setViewValue(newInput);
                        ctrl.$render();
                        return newInput;
                    });
                }
            };
        });

        function toRad(angle) {
            return angle * (Math.PI / 180);
        }

        function precise(x) {
            return (Math.round(x * 1e3) / 1e3)
        }
        function multiply(a, b) {
            var aNumRows = a.length, aNumCols = a[0].length,
                bNumRows = b.length, bNumCols = b[0].length,
                m = new Array(aNumRows);  // initialize array of rows
            for (var r = 0; r < aNumRows; ++r) {
                m[r] = new Array(bNumCols); // initialize the current row
                for (var c = 0; c < bNumCols; ++c) {
                    m[r][c] = 0;             // initialize the current cell
                    for (var i = 0; i < aNumCols; ++i) {
                        m[r][c] += a[r][i] * b[i][c];
                    }
                }
            }
            return m;
        }
    </script>
    {{/contentFor}}